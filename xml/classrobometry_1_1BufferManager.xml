<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classrobometry_1_1BufferManager" kind="class" language="C++" prot="public">
    <compoundname>robometry::BufferManager</compoundname>
    <includes local="no">robometry/BufferManager.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classrobometry_1_1BufferManager_1a611ab8b10e1fd64f51bf924f6ec5663c" prot="private" static="no" mutable="no">
        <type><ref refid="structrobometry_1_1BufferConfig" kindref="compound">BufferConfig</ref></type>
        <definition>BufferConfig robometry::BufferManager::m_bufferConfig</definition>
        <argsstring></argsstring>
        <name>m_bufferConfig</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robometry/BufferManager.h" line="542" column="18" bodyfile="robometry/BufferManager.h" bodystart="542" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classrobometry_1_1BufferManager_1a0c9c4790ca1fd1d68c42675de2d9432f" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool robometry::BufferManager::m_should_stop_thread</definition>
        <argsstring></argsstring>
        <name>m_should_stop_thread</name>
        <initializer>{ false }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robometry/BufferManager.h" line="543" column="10" bodyfile="robometry/BufferManager.h" bodystart="543" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classrobometry_1_1BufferManager_1a6265fb27b9ec3221121c1efcfd4c2844" prot="private" static="no" mutable="no">
        <type>std::mutex</type>
        <definition>std::mutex robometry::BufferManager::m_mutex_cv</definition>
        <argsstring></argsstring>
        <name>m_mutex_cv</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robometry/BufferManager.h" line="544" column="16" bodyfile="robometry/BufferManager.h" bodystart="544" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classrobometry_1_1BufferManager_1a23a0c1a932c366e963e62479943a9720" prot="private" static="no" mutable="no">
        <type>std::condition_variable</type>
        <definition>std::condition_variable robometry::BufferManager::m_cv</definition>
        <argsstring></argsstring>
        <name>m_cv</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robometry/BufferManager.h" line="545" column="29" bodyfile="robometry/BufferManager.h" bodystart="545" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classrobometry_1_1BufferManager_1a653175d8404bd94478fc796e16909986" prot="private" static="no" mutable="no">
        <type>std::shared_ptr&lt; <ref refid="classrobometry_1_1TreeNode" kindref="compound">TreeNode</ref>&lt; <ref refid="structrobometry_1_1BufferInfo" kindref="compound">BufferInfo</ref> &gt; &gt;</type>
        <definition>std::shared_ptr&lt;TreeNode&lt;BufferInfo&gt; &gt; robometry::BufferManager::m_tree</definition>
        <argsstring></argsstring>
        <name>m_tree</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robometry/BufferManager.h" line="546" column="21" bodyfile="robometry/BufferManager.h" bodystart="546" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classrobometry_1_1BufferManager_1a9bf209bdd7fc0e976147790245778716" prot="private" static="no" mutable="no">
        <type>std::function&lt; double(void)&gt;</type>
        <definition>std::function&lt;double(void)&gt; robometry::BufferManager::m_nowFunction</definition>
        <argsstring></argsstring>
        <name>m_nowFunction</name>
        <initializer>{DefaultClock}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robometry/BufferManager.h" line="548" column="19" bodyfile="robometry/BufferManager.h" bodystart="548" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classrobometry_1_1BufferManager_1affddabd0299a0ae4ec9049f0025b57c6" prot="private" static="no" mutable="no">
        <type>std::function&lt; bool(const std::string &amp;, const SaveCallbackSaveMethod &amp;method)&gt;</type>
        <definition>std::function&lt;bool(const std::string&amp;, const SaveCallbackSaveMethod&amp; method)&gt; robometry::BufferManager::m_saveCallback</definition>
        <argsstring></argsstring>
        <name>m_saveCallback</name>
        <initializer>{}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robometry/BufferManager.h" line="549" column="19" bodyfile="robometry/BufferManager.h" bodystart="549" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classrobometry_1_1BufferManager_1a3041c1653fdb35d463ab76173e3a6a10" prot="private" static="no" mutable="no">
        <type>std::thread</type>
        <definition>std::thread robometry::BufferManager::m_save_thread</definition>
        <argsstring></argsstring>
        <name>m_save_thread</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robometry/BufferManager.h" line="551" column="17" bodyfile="robometry/BufferManager.h" bodystart="551" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classrobometry_1_1BufferManager_1a0e03754c687b6f0bf93ff89a4cff69d2" prot="private" static="no" mutable="no">
        <type>matioCpp::CellArray</type>
        <definition>matioCpp::CellArray robometry::BufferManager::m_description_cell_array</definition>
        <argsstring></argsstring>
        <name>m_description_cell_array</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robometry/BufferManager.h" line="552" column="25" bodyfile="robometry/BufferManager.h" bodystart="552" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classrobometry_1_1BufferManager_1a974c84cdd0bf221190d50cac034de08f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>robometry::BufferManager::BufferManager</definition>
        <argsstring>()</argsstring>
        <name>BufferManager</name>
        <briefdescription>
<para>Construct an empty <ref refid="classrobometry_1_1BufferManager" kindref="compound">BufferManager</ref> object. </para>
        </briefdescription>
        <detaileddescription>
<para>For being used it has to be configured afterwards. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robometry/BufferManager.h" line="258" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classrobometry_1_1BufferManager_1ad10257b10cee8e3d1c359ba1a0b0b0e1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>robometry::BufferManager::BufferManager</definition>
        <argsstring>(const BufferConfig &amp;_bufferConfig)</argsstring>
        <name>BufferManager</name>
        <param>
          <type>const <ref refid="structrobometry_1_1BufferConfig" kindref="compound">BufferConfig</ref> &amp;</type>
          <declname>_bufferConfig</declname>
        </param>
        <briefdescription>
<para>Construct a new <ref refid="classrobometry_1_1BufferManager" kindref="compound">BufferManager</ref> object, configuring it via the <ref refid="structrobometry_1_1BufferConfig" kindref="compound">robometry::BufferConfig</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">_bufferConfig</parametername>
</parameternamelist>
<parameterdescription>
<para>The struct containing the configuration for the <ref refid="classrobometry_1_1BufferManager" kindref="compound">BufferManager</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robometry/BufferManager.h" line="266" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classrobometry_1_1BufferManager_1a5a1b3f83a316ae863af6a49fb83ee74f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>robometry::BufferManager::~BufferManager</definition>
        <argsstring>()</argsstring>
        <name>~BufferManager</name>
        <briefdescription>
<para>Destroy the <ref refid="classrobometry_1_1BufferManager" kindref="compound">BufferManager</ref> object. </para>
        </briefdescription>
        <detaileddescription>
<para>If auto_save is enabled, it saves to file the remaining data in the buffer. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robometry/BufferManager.h" line="273" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classrobometry_1_1BufferManager_1a0c84c7e390118b921327eba9111742a0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool robometry::BufferManager::enablePeriodicSave</definition>
        <argsstring>(double _save_period)</argsstring>
        <name>enablePeriodicSave</name>
        <param>
          <type>double</type>
          <declname>_save_period</declname>
        </param>
        <briefdescription>
<para>Enable the save thread with _save_period seconds of period. </para>
        </briefdescription>
        <detaileddescription>
<para>If the thread has been started yet in the configuration through BufferConfing, it skips it.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">_save_period</parametername>
</parameternamelist>
<parameterdescription>
<para>The period in seconds of the save thread. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true on success, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robometry/BufferManager.h" line="283" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classrobometry_1_1BufferManager_1a7fe9f929551e613d8484f90b092562f7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool robometry::BufferManager::configure</definition>
        <argsstring>(const BufferConfig &amp;_bufferConfig)</argsstring>
        <name>configure</name>
        <param>
          <type>const <ref refid="structrobometry_1_1BufferConfig" kindref="compound">BufferConfig</ref> &amp;</type>
          <declname>_bufferConfig</declname>
        </param>
        <briefdescription>
<para>Configure the <ref refid="classrobometry_1_1BufferManager" kindref="compound">BufferManager</ref> through a <ref refid="structrobometry_1_1BufferConfig" kindref="compound">BufferConfig</ref> object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">_bufferConfig</parametername>
</parameternamelist>
<parameterdescription>
<para>The struct containing the configuration parameters. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true on success, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robometry/BufferManager.h" line="291" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classrobometry_1_1BufferManager_1a540cd1c8852d116e95e90c5be7407baf" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structrobometry_1_1BufferConfig" kindref="compound">BufferConfig</ref></type>
        <definition>BufferConfig robometry::BufferManager::getBufferConfig</definition>
        <argsstring>() const</argsstring>
        <name>getBufferConfig</name>
        <briefdescription>
<para>Get the <ref refid="structrobometry_1_1BufferConfig" kindref="compound">BufferConfig</ref> object representing the actual configuration. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The <ref refid="structrobometry_1_1BufferConfig" kindref="compound">BufferConfig</ref> object. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robometry/BufferManager.h" line="298" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classrobometry_1_1BufferManager_1a4f29b0fb46ae222d13bb5ac9cefbcf4c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void robometry::BufferManager::setFileName</definition>
        <argsstring>(const std::string &amp;filename)</argsstring>
        <name>setFileName</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>filename</declname>
        </param>
        <briefdescription>
<para>Set the file name that will be created by the <ref refid="classrobometry_1_1BufferManager" kindref="compound">BufferManager</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">filename</parametername>
</parameternamelist>
<parameterdescription>
<para>The file name to be set. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robometry/BufferManager.h" line="304" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classrobometry_1_1BufferManager_1ac792f4059604856a4bc0c5d5ad7b185f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void robometry::BufferManager::setDefaultPath</definition>
        <argsstring>(const std::string &amp;path)</argsstring>
        <name>setDefaultPath</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>Set the path where the files will be saved. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">path</parametername>
</parameternamelist>
<parameterdescription>
<para>The path to be set. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robometry/BufferManager.h" line="311" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classrobometry_1_1BufferManager_1afb5c4e8763d2b5efba7e9de4997adc80" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void robometry::BufferManager::enableCompression</definition>
        <argsstring>(bool enable_compression)</argsstring>
        <name>enableCompression</name>
        <param>
          <type>bool</type>
          <declname>enable_compression</declname>
        </param>
        <briefdescription>
<para>Enable the zlib compression. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">flag</parametername>
</parameternamelist>
<parameterdescription>
<para>for enabling/disabling compression. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robometry/BufferManager.h" line="318" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classrobometry_1_1BufferManager_1aaed09927eff8aa8917331030e1b42479" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void robometry::BufferManager::setDescriptionList</definition>
        <argsstring>(const std::vector&lt; std::string &gt; &amp;description_list)</argsstring>
        <name>setDescriptionList</name>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>description_list</declname>
        </param>
        <briefdescription>
<para>Set the description list that will be saved in all the files. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">description</parametername>
</parameternamelist>
<parameterdescription>
<para>The description to be set. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robometry/BufferManager.h" line="325" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classrobometry_1_1BufferManager_1a4ba6c0767d02f8bf827d9514e6dd2646" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void robometry::BufferManager::resize</definition>
        <argsstring>(size_t new_size)</argsstring>
        <name>resize</name>
        <param>
          <type>size_t</type>
          <declname>new_size</declname>
        </param>
        <briefdescription>
<para>Resize the Buffer/s. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">new_size</parametername>
</parameternamelist>
<parameterdescription>
<para>The new size to be resized to. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robometry/BufferManager.h" line="332" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classrobometry_1_1BufferManager_1ad3651345b6df1108e02f2d14e12d3cec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void robometry::BufferManager::set_capacity</definition>
        <argsstring>(size_t new_size)</argsstring>
        <name>set_capacity</name>
        <param>
          <type>size_t</type>
          <declname>new_size</declname>
        </param>
        <briefdescription>
<para>Set the capacity of Buffer/s. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">new_size</parametername>
</parameternamelist>
<parameterdescription>
<para>The new size. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robometry/BufferManager.h" line="339" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classrobometry_1_1BufferManager_1a8d718e8fa0d77ce052c6dc93469edb7a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool robometry::BufferManager::addChannel</definition>
        <argsstring>(const ChannelInfo &amp;channel)</argsstring>
        <name>addChannel</name>
        <param>
          <type>const <ref refid="structrobometry_1_1ChannelInfo" kindref="compound">ChannelInfo</ref> &amp;</type>
          <declname>channel</declname>
        </param>
        <briefdescription>
<para>Add a channel(variable) to the <ref refid="classrobometry_1_1BufferManager" kindref="compound">BufferManager</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>The channels have to be unique in the <ref refid="classrobometry_1_1BufferManager" kindref="compound">BufferManager</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">channel</parametername>
</parameternamelist>
<parameterdescription>
<para>Pair representing the channel to be added. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true on success, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robometry/BufferManager.h" line="348" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classrobometry_1_1BufferManager_1a3392c4df7033afb5bb2a0fe1771f2fa2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool robometry::BufferManager::addChannels</definition>
        <argsstring>(const std::vector&lt; ChannelInfo &gt; &amp;channels)</argsstring>
        <name>addChannels</name>
        <param>
          <type>const std::vector&lt; <ref refid="structrobometry_1_1ChannelInfo" kindref="compound">ChannelInfo</ref> &gt; &amp;</type>
          <declname>channels</declname>
        </param>
        <briefdescription>
<para>Add a list of channels(variables) to the <ref refid="classrobometry_1_1BufferManager" kindref="compound">BufferManager</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>The channels have to be unique in the <ref refid="classrobometry_1_1BufferManager" kindref="compound">BufferManager</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">channels</parametername>
</parameternamelist>
<parameterdescription>
<para>List of pair representing the channels to be added. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true on success, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robometry/BufferManager.h" line="357" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classrobometry_1_1BufferManager_1ab3cc66b9da3c91d7b3e48bacce813af9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void robometry::BufferManager::push_back</definition>
        <argsstring>(matioCpp::Span&lt; const T &gt; elem, double ts, const std::string &amp;var_name)</argsstring>
        <name>push_back</name>
        <param>
          <type>matioCpp::Span&lt; const T &gt;</type>
          <declname>elem</declname>
        </param>
        <param>
          <type>double</type>
          <declname>ts</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>var_name</declname>
        </param>
        <briefdescription>
<para>Push a new element in the var_name channel. </para>
        </briefdescription>
        <detaileddescription>
<para>The var_name channels must exist, otherwise an exception is thrown.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">elem</parametername>
</parameternamelist>
<parameterdescription>
<para>The element to be pushed(via copy) in the channel. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">ts</parametername>
</parameternamelist>
<parameterdescription>
<para>The timestamp of the element to be pushed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">var_name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the channel. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robometry/BufferManager.h" line="368" column="17" bodyfile="robometry/BufferManager.h" bodystart="368" bodyend="371"/>
      </memberdef>
      <memberdef kind="function" id="classrobometry_1_1BufferManager_1aea5bd2e07569da5c969abbc2f294804b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void robometry::BufferManager::push_back</definition>
        <argsstring>(const std::initializer_list&lt; T &gt; &amp;elem, double ts, const std::string &amp;var_name)</argsstring>
        <name>push_back</name>
        <param>
          <type>const std::initializer_list&lt; T &gt; &amp;</type>
          <declname>elem</declname>
        </param>
        <param>
          <type>double</type>
          <declname>ts</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>var_name</declname>
        </param>
        <briefdescription>
<para>Push a new element in the var_name channel. </para>
        </briefdescription>
        <detaileddescription>
<para>The var_name channels must exist, otherwise an exception is thrown.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">elem</parametername>
</parameternamelist>
<parameterdescription>
<para>The element to be pushed(via copy) in the channel. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">ts</parametername>
</parameternamelist>
<parameterdescription>
<para>The timestamp of the element to be pushed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">var_name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the channel. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robometry/BufferManager.h" line="382" column="17" bodyfile="robometry/BufferManager.h" bodystart="382" bodyend="385"/>
      </memberdef>
      <memberdef kind="function" id="classrobometry_1_1BufferManager_1afc48d58e20a2f3d36a0c7ba3d8b637e0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void robometry::BufferManager::push_back</definition>
        <argsstring>(matioCpp::Span&lt; const T &gt; elem, const std::string &amp;var_name)</argsstring>
        <name>push_back</name>
        <param>
          <type>matioCpp::Span&lt; const T &gt;</type>
          <declname>elem</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>var_name</declname>
        </param>
        <briefdescription>
<para>Push a new element in the var_name channel. </para>
        </briefdescription>
        <detaileddescription>
<para>The var_name channels must exist, otherwise an exception is thrown.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">elem</parametername>
</parameternamelist>
<parameterdescription>
<para>The element to be pushed(via copy) in the channel. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">var_name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the channel. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robometry/BufferManager.h" line="395" column="17" bodyfile="robometry/BufferManager.h" bodystart="395" bodyend="398"/>
      </memberdef>
      <memberdef kind="function" id="classrobometry_1_1BufferManager_1abedaa296d9a37a884589a8aa11b916e9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void robometry::BufferManager::push_back</definition>
        <argsstring>(const std::initializer_list&lt; T &gt; &amp;elem, const std::string &amp;var_name)</argsstring>
        <name>push_back</name>
        <param>
          <type>const std::initializer_list&lt; T &gt; &amp;</type>
          <declname>elem</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>var_name</declname>
        </param>
        <briefdescription>
<para>Push a new element in the var_name channel. </para>
        </briefdescription>
        <detaileddescription>
<para>The var_name channels must exist, otherwise an exception is thrown.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">elem</parametername>
</parameternamelist>
<parameterdescription>
<para>The element to be pushed(via copy) in the channel. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">var_name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the channel. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robometry/BufferManager.h" line="408" column="17" bodyfile="robometry/BufferManager.h" bodystart="408" bodyend="411"/>
      </memberdef>
      <memberdef kind="function" id="classrobometry_1_1BufferManager_1afb17e9545b396e02b05bf8bb4af7ff88" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void robometry::BufferManager::push_back</definition>
        <argsstring>(const T &amp;elem, double ts, const std::string &amp;var_name)</argsstring>
        <name>push_back</name>
        <param>
          <type>const T &amp;</type>
          <declname>elem</declname>
        </param>
        <param>
          <type>double</type>
          <declname>ts</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>var_name</declname>
        </param>
        <briefdescription>
<para>Push a new element in the var_name channel. </para>
        </briefdescription>
        <detaileddescription>
<para>The var_name channels must exist, otherwise an exception is thrown.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">elem</parametername>
</parameternamelist>
<parameterdescription>
<para>The element to be pushed in the channel. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">ts</parametername>
</parameternamelist>
<parameterdescription>
<para>The timestamp of the element to be pushed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">var_name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the channel. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robometry/BufferManager.h" line="422" column="17" bodyfile="robometry/BufferManager.h" bodystart="422" bodyend="453"/>
      </memberdef>
      <memberdef kind="function" id="classrobometry_1_1BufferManager_1a73895765574f30cc838b8a3505ea1662" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void robometry::BufferManager::push_back</definition>
        <argsstring>(const T &amp;elem, const std::string &amp;var_name)</argsstring>
        <name>push_back</name>
        <param>
          <type>const T &amp;</type>
          <declname>elem</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>var_name</declname>
        </param>
        <briefdescription>
<para>Push a new element in the var_name channel. </para>
        </briefdescription>
        <detaileddescription>
<para>The var_name channels must exist, otherwise an exception is thrown.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">elem</parametername>
</parameternamelist>
<parameterdescription>
<para>The element to be pushed in the channel. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">var_name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the channel. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robometry/BufferManager.h" line="463" column="17" bodyfile="robometry/BufferManager.h" bodystart="463" bodyend="466"/>
      </memberdef>
      <memberdef kind="function" id="classrobometry_1_1BufferManager_1af952e8a1325c0b57716961054adc509f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool robometry::BufferManager::saveToFile</definition>
        <argsstring>(bool flush_all=true)</argsstring>
        <name>saveToFile</name>
        <param>
          <type>bool</type>
          <declname>flush_all</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Save the content of all the channels into a file. </para>
        </briefdescription>
        <detaileddescription>
<para>If flush_all is set to false, it saves only the content of the channels that have a number of samples greater than the <ref refid="structrobometry_1_1BufferConfig_1a5a27f3bd1d57b9e69fdab724ad518b4d" kindref="member">robometry::BufferConfig::data_threshold</ref>. If <ref refid="structrobometry_1_1BufferConfig_1a5a27f3bd1d57b9e69fdab724ad518b4d" kindref="member">robometry::BufferConfig::data_threshold</ref> is greater than <ref refid="structrobometry_1_1BufferConfig_1a8be979d1a542a15354c09fd1181c8bf0" kindref="member">robometry::BufferConfig::n_samples</ref> this check is skipped.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">flush_all</parametername>
</parameternamelist>
<parameterdescription>
<para>Flag for forcing the save of whatever is contained in the channels. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true on success, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robometry/BufferManager.h" line="479" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classrobometry_1_1BufferManager_1ad5451c7b51c2eea5b1736b78e5b04038" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool robometry::BufferManager::saveToFile</definition>
        <argsstring>(std::string &amp;file_name_path, bool flush_all=true)</argsstring>
        <name>saveToFile</name>
        <param>
          <type>std::string &amp;</type>
          <declname>file_name_path</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>flush_all</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Save the content of all the channels into a file. </para>
        </briefdescription>
        <detaileddescription>
<para>If flush_all is set to false, it saves only the content of the channels that have a number of samples greater than the <ref refid="structrobometry_1_1BufferConfig_1a5a27f3bd1d57b9e69fdab724ad518b4d" kindref="member">robometry::BufferConfig::data_threshold</ref>. If <ref refid="structrobometry_1_1BufferConfig_1a5a27f3bd1d57b9e69fdab724ad518b4d" kindref="member">robometry::BufferConfig::data_threshold</ref> is greater than <ref refid="structrobometry_1_1BufferConfig_1a8be979d1a542a15354c09fd1181c8bf0" kindref="member">robometry::BufferConfig::n_samples</ref> this check is skipped.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">flush_all</parametername>
</parameternamelist>
<parameterdescription>
<para>Flag for forcing the save of whatever is contained in the channels. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">file_name_path</parametername>
</parameternamelist>
<parameterdescription>
<para>path name of the matfile without the suffix .mat </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true on success, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robometry/BufferManager.h" line="492" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classrobometry_1_1BufferManager_1a1be266a01997e0dc84ce21bc5e234055" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool robometry::BufferManager::setNowFunction</definition>
        <argsstring>(std::function&lt; double(void)&gt; now)</argsstring>
        <name>setNowFunction</name>
        <param>
          <type>std::function&lt; double(void)&gt;</type>
          <declname>now</declname>
        </param>
        <briefdescription>
<para>Set the now function, by default is std::chrono::duration&lt;double&gt;(std::chrono::system_clock::now().time_since_epoch()).count(). </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">now</parametername>
</parameternamelist>
<parameterdescription>
<para>The now function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true on success, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robometry/BufferManager.h" line="499" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classrobometry_1_1BufferManager_1aa08e6af9d944bbc9bd43c8455699232a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool robometry::BufferManager::setSaveCallback</definition>
        <argsstring>(std::function&lt; bool(const std::string &amp;, const SaveCallbackSaveMethod &amp;method)&gt; saveCallback)</argsstring>
        <name>setSaveCallback</name>
        <param>
          <type>std::function&lt; bool(const std::string &amp;, const SaveCallbackSaveMethod &amp;method)&gt;</type>
          <declname>saveCallback</declname>
        </param>
        <briefdescription>
<para>Set the saveCallback function. </para>
        </briefdescription>
        <detaileddescription>
<para>Thanks to this function you can save additional data type along with the matfile salve by telemetry <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">saveCallback</parametername>
</parameternamelist>
<parameterdescription>
<para>The saveCallback function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true on success, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robometry/BufferManager.h" line="508" column="10"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-func">
      <memberdef kind="function" id="classrobometry_1_1BufferManager_1a57a7469a3dac34349fbf701b3072ade9" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>static double robometry::BufferManager::DefaultClock</definition>
        <argsstring>()</argsstring>
        <name>DefaultClock</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robometry/BufferManager.h" line="512" column="19"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classrobometry_1_1BufferManager_1a35cd82d4691f25010c5e77ba15bb453d" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void robometry::BufferManager::periodicSave</definition>
        <argsstring>()</argsstring>
        <name>periodicSave</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robometry/BufferManager.h" line="514" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classrobometry_1_1BufferManager_1a01e6c89b678e994ab552f92e1b5e1cb4" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>matioCpp::Struct</type>
        <definition>matioCpp::Struct robometry::BufferManager::createTreeStruct</definition>
        <argsstring>(const std::string &amp;node_name, std::shared_ptr&lt; TreeNode&lt; BufferInfo &gt;&gt; tree_node, bool flush_all)</argsstring>
        <name>createTreeStruct</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>node_name</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classrobometry_1_1TreeNode" kindref="compound">TreeNode</ref>&lt; <ref refid="structrobometry_1_1BufferInfo" kindref="compound">BufferInfo</ref> &gt;&gt;</type>
          <declname>tree_node</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>flush_all</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robometry/BufferManager.h" line="516" column="22"/>
      </memberdef>
      <memberdef kind="function" id="classrobometry_1_1BufferManager_1ad8e2bb97da84954a404851994696b0e2" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>matioCpp::Struct</type>
        <definition>matioCpp::Struct robometry::BufferManager::createElementStruct</definition>
        <argsstring>(const std::string &amp;var_name, std::shared_ptr&lt; BufferInfo &gt; buffInfo, bool flush_all) const</argsstring>
        <name>createElementStruct</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>var_name</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="structrobometry_1_1BufferInfo" kindref="compound">BufferInfo</ref> &gt;</type>
          <declname>buffInfo</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>flush_all</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robometry/BufferManager.h" line="520" column="22"/>
      </memberdef>
      <memberdef kind="function" id="classrobometry_1_1BufferManager_1a97bb308b05ac34a4df633be36bae80af" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string robometry::BufferManager::fileIndex</definition>
        <argsstring>() const</argsstring>
        <name>fileIndex</name>
        <briefdescription>
<para>This is an helper function that can be used to generate the file indexing accordingly to the content of <computeroutput>m_bufferConfig.file_indexing</computeroutput> </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>a string containing the index </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robometry/BufferManager.h" line="529" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classrobometry_1_1BufferManager_1a993200226de1affa576bd37905e28595" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void robometry::BufferManager::populateDescriptionCellArray</definition>
        <argsstring>()</argsstring>
        <name>populateDescriptionCellArray</name>
        <briefdescription>
<para>This is an helper function that will be disappear the day matio-cpp will support the std::vector&lt;std::string&gt; </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robometry/BufferManager.h" line="535" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classrobometry_1_1BufferManager_1a5b292c3163d4041f20764c17ed2b6029" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void robometry::BufferManager::resize</definition>
        <argsstring>(size_t new_size, std::shared_ptr&lt; TreeNode&lt; BufferInfo &gt;&gt; node)</argsstring>
        <name>resize</name>
        <param>
          <type>size_t</type>
          <declname>new_size</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classrobometry_1_1TreeNode" kindref="compound">TreeNode</ref>&lt; <ref refid="structrobometry_1_1BufferInfo" kindref="compound">BufferInfo</ref> &gt;&gt;</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robometry/BufferManager.h" line="537" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classrobometry_1_1BufferManager_1a4a276922da7bfd19f6bf3ca2400f9fff" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void robometry::BufferManager::set_capacity</definition>
        <argsstring>(size_t new_size, std::shared_ptr&lt; TreeNode&lt; BufferInfo &gt;&gt; node)</argsstring>
        <name>set_capacity</name>
        <param>
          <type>size_t</type>
          <declname>new_size</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classrobometry_1_1TreeNode" kindref="compound">TreeNode</ref>&lt; <ref refid="structrobometry_1_1BufferInfo" kindref="compound">BufferInfo</ref> &gt;&gt;</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robometry/BufferManager.h" line="539" column="10"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Class that manages the buffers associated to the channels of the telemetry. </para>
    </briefdescription>
    <detaileddescription>
<para>Each <ref refid="classrobometry_1_1BufferManager" kindref="compound">BufferManager</ref> can handle different types of data, the number of samples is defined in the configuration and it is the same for every channel. On the other hand the data inside the channels can have different dimensionality(e.g. 1x1, 2x3 etc). It contains utilities for saving the data of the channels in mat files, and to save/read the configuration to/from a json file. </para>
    </detaileddescription>
    <location file="robometry/BufferManager.h" line="250" column="1" bodyfile="robometry/BufferManager.h" bodystart="250" bodyend="553"/>
    <listofallmembers>
      <member refid="classrobometry_1_1BufferManager_1a8d718e8fa0d77ce052c6dc93469edb7a" prot="public" virt="non-virtual"><scope>robometry::BufferManager</scope><name>addChannel</name></member>
      <member refid="classrobometry_1_1BufferManager_1a3392c4df7033afb5bb2a0fe1771f2fa2" prot="public" virt="non-virtual"><scope>robometry::BufferManager</scope><name>addChannels</name></member>
      <member refid="classrobometry_1_1BufferManager_1a974c84cdd0bf221190d50cac034de08f" prot="public" virt="non-virtual"><scope>robometry::BufferManager</scope><name>BufferManager</name></member>
      <member refid="classrobometry_1_1BufferManager_1ad10257b10cee8e3d1c359ba1a0b0b0e1" prot="public" virt="non-virtual"><scope>robometry::BufferManager</scope><name>BufferManager</name></member>
      <member refid="classrobometry_1_1BufferManager_1a7fe9f929551e613d8484f90b092562f7" prot="public" virt="non-virtual"><scope>robometry::BufferManager</scope><name>configure</name></member>
      <member refid="classrobometry_1_1BufferManager_1ad8e2bb97da84954a404851994696b0e2" prot="private" virt="non-virtual"><scope>robometry::BufferManager</scope><name>createElementStruct</name></member>
      <member refid="classrobometry_1_1BufferManager_1a01e6c89b678e994ab552f92e1b5e1cb4" prot="private" virt="non-virtual"><scope>robometry::BufferManager</scope><name>createTreeStruct</name></member>
      <member refid="classrobometry_1_1BufferManager_1a57a7469a3dac34349fbf701b3072ade9" prot="private" virt="non-virtual"><scope>robometry::BufferManager</scope><name>DefaultClock</name></member>
      <member refid="classrobometry_1_1BufferManager_1afb5c4e8763d2b5efba7e9de4997adc80" prot="public" virt="non-virtual"><scope>robometry::BufferManager</scope><name>enableCompression</name></member>
      <member refid="classrobometry_1_1BufferManager_1a0c84c7e390118b921327eba9111742a0" prot="public" virt="non-virtual"><scope>robometry::BufferManager</scope><name>enablePeriodicSave</name></member>
      <member refid="classrobometry_1_1BufferManager_1a97bb308b05ac34a4df633be36bae80af" prot="private" virt="non-virtual"><scope>robometry::BufferManager</scope><name>fileIndex</name></member>
      <member refid="classrobometry_1_1BufferManager_1a540cd1c8852d116e95e90c5be7407baf" prot="public" virt="non-virtual"><scope>robometry::BufferManager</scope><name>getBufferConfig</name></member>
      <member refid="classrobometry_1_1BufferManager_1a611ab8b10e1fd64f51bf924f6ec5663c" prot="private" virt="non-virtual"><scope>robometry::BufferManager</scope><name>m_bufferConfig</name></member>
      <member refid="classrobometry_1_1BufferManager_1a23a0c1a932c366e963e62479943a9720" prot="private" virt="non-virtual"><scope>robometry::BufferManager</scope><name>m_cv</name></member>
      <member refid="classrobometry_1_1BufferManager_1a0e03754c687b6f0bf93ff89a4cff69d2" prot="private" virt="non-virtual"><scope>robometry::BufferManager</scope><name>m_description_cell_array</name></member>
      <member refid="classrobometry_1_1BufferManager_1a6265fb27b9ec3221121c1efcfd4c2844" prot="private" virt="non-virtual"><scope>robometry::BufferManager</scope><name>m_mutex_cv</name></member>
      <member refid="classrobometry_1_1BufferManager_1a9bf209bdd7fc0e976147790245778716" prot="private" virt="non-virtual"><scope>robometry::BufferManager</scope><name>m_nowFunction</name></member>
      <member refid="classrobometry_1_1BufferManager_1a3041c1653fdb35d463ab76173e3a6a10" prot="private" virt="non-virtual"><scope>robometry::BufferManager</scope><name>m_save_thread</name></member>
      <member refid="classrobometry_1_1BufferManager_1affddabd0299a0ae4ec9049f0025b57c6" prot="private" virt="non-virtual"><scope>robometry::BufferManager</scope><name>m_saveCallback</name></member>
      <member refid="classrobometry_1_1BufferManager_1a0c9c4790ca1fd1d68c42675de2d9432f" prot="private" virt="non-virtual"><scope>robometry::BufferManager</scope><name>m_should_stop_thread</name></member>
      <member refid="classrobometry_1_1BufferManager_1a653175d8404bd94478fc796e16909986" prot="private" virt="non-virtual"><scope>robometry::BufferManager</scope><name>m_tree</name></member>
      <member refid="classrobometry_1_1BufferManager_1a35cd82d4691f25010c5e77ba15bb453d" prot="private" virt="non-virtual"><scope>robometry::BufferManager</scope><name>periodicSave</name></member>
      <member refid="classrobometry_1_1BufferManager_1a993200226de1affa576bd37905e28595" prot="private" virt="non-virtual"><scope>robometry::BufferManager</scope><name>populateDescriptionCellArray</name></member>
      <member refid="classrobometry_1_1BufferManager_1ab3cc66b9da3c91d7b3e48bacce813af9" prot="public" virt="non-virtual"><scope>robometry::BufferManager</scope><name>push_back</name></member>
      <member refid="classrobometry_1_1BufferManager_1aea5bd2e07569da5c969abbc2f294804b" prot="public" virt="non-virtual"><scope>robometry::BufferManager</scope><name>push_back</name></member>
      <member refid="classrobometry_1_1BufferManager_1afc48d58e20a2f3d36a0c7ba3d8b637e0" prot="public" virt="non-virtual"><scope>robometry::BufferManager</scope><name>push_back</name></member>
      <member refid="classrobometry_1_1BufferManager_1abedaa296d9a37a884589a8aa11b916e9" prot="public" virt="non-virtual"><scope>robometry::BufferManager</scope><name>push_back</name></member>
      <member refid="classrobometry_1_1BufferManager_1afb17e9545b396e02b05bf8bb4af7ff88" prot="public" virt="non-virtual"><scope>robometry::BufferManager</scope><name>push_back</name></member>
      <member refid="classrobometry_1_1BufferManager_1a73895765574f30cc838b8a3505ea1662" prot="public" virt="non-virtual"><scope>robometry::BufferManager</scope><name>push_back</name></member>
      <member refid="classrobometry_1_1BufferManager_1a4ba6c0767d02f8bf827d9514e6dd2646" prot="public" virt="non-virtual"><scope>robometry::BufferManager</scope><name>resize</name></member>
      <member refid="classrobometry_1_1BufferManager_1a5b292c3163d4041f20764c17ed2b6029" prot="private" virt="non-virtual"><scope>robometry::BufferManager</scope><name>resize</name></member>
      <member refid="classrobometry_1_1BufferManager_1af952e8a1325c0b57716961054adc509f" prot="public" virt="non-virtual"><scope>robometry::BufferManager</scope><name>saveToFile</name></member>
      <member refid="classrobometry_1_1BufferManager_1ad5451c7b51c2eea5b1736b78e5b04038" prot="public" virt="non-virtual"><scope>robometry::BufferManager</scope><name>saveToFile</name></member>
      <member refid="classrobometry_1_1BufferManager_1ad3651345b6df1108e02f2d14e12d3cec" prot="public" virt="non-virtual"><scope>robometry::BufferManager</scope><name>set_capacity</name></member>
      <member refid="classrobometry_1_1BufferManager_1a4a276922da7bfd19f6bf3ca2400f9fff" prot="private" virt="non-virtual"><scope>robometry::BufferManager</scope><name>set_capacity</name></member>
      <member refid="classrobometry_1_1BufferManager_1ac792f4059604856a4bc0c5d5ad7b185f" prot="public" virt="non-virtual"><scope>robometry::BufferManager</scope><name>setDefaultPath</name></member>
      <member refid="classrobometry_1_1BufferManager_1aaed09927eff8aa8917331030e1b42479" prot="public" virt="non-virtual"><scope>robometry::BufferManager</scope><name>setDescriptionList</name></member>
      <member refid="classrobometry_1_1BufferManager_1a4f29b0fb46ae222d13bb5ac9cefbcf4c" prot="public" virt="non-virtual"><scope>robometry::BufferManager</scope><name>setFileName</name></member>
      <member refid="classrobometry_1_1BufferManager_1a1be266a01997e0dc84ce21bc5e234055" prot="public" virt="non-virtual"><scope>robometry::BufferManager</scope><name>setNowFunction</name></member>
      <member refid="classrobometry_1_1BufferManager_1aa08e6af9d944bbc9bd43c8455699232a" prot="public" virt="non-virtual"><scope>robometry::BufferManager</scope><name>setSaveCallback</name></member>
      <member refid="classrobometry_1_1BufferManager_1a5a1b3f83a316ae863af6a49fb83ee74f" prot="public" virt="non-virtual"><scope>robometry::BufferManager</scope><name>~BufferManager</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
