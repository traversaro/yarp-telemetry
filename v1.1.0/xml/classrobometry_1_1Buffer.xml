<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classrobometry_1_1Buffer" kind="class" language="C++" prot="public">
    <compoundname>robometry::Buffer</compoundname>
    <includes local="no">robometry/Buffer.h</includes>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classrobometry_1_1Buffer_1a562e3625a19d4f537b6cf4427dc7d26b" prot="public" static="no">
        <type>typename boost::circular_buffer&lt; <ref refid="structrobometry_1_1Record" kindref="compound">Record</ref> &gt;::iterator</type>
        <definition>using robometry::Buffer::iterator =  typename boost::circular_buffer&lt;Record&gt;::iterator</definition>
        <argsstring></argsstring>
        <name>iterator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robometry/Buffer.h" line="27" column="5" bodyfile="robometry/Buffer.h" bodystart="27" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classrobometry_1_1Buffer_1a23320ce999748b3be77dbe797560f841" prot="public" static="no">
        <type>typename boost::circular_buffer&lt; <ref refid="structrobometry_1_1Record" kindref="compound">Record</ref> &gt;::const_iterator</type>
        <definition>using robometry::Buffer::const_iterator =  typename boost::circular_buffer&lt;Record&gt;::const_iterator</definition>
        <argsstring></argsstring>
        <name>const_iterator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robometry/Buffer.h" line="28" column="5" bodyfile="robometry/Buffer.h" bodystart="28" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classrobometry_1_1Buffer_1a53ce05c91895042c65b1536dff7e54d1" prot="private" static="no" mutable="no">
        <type>std::shared_ptr&lt; boost::circular_buffer&lt; <ref refid="structrobometry_1_1Record" kindref="compound">Record</ref> &gt; &gt;</type>
        <definition>std::shared_ptr&lt;boost::circular_buffer&lt;Record&gt; &gt; robometry::Buffer::m_buffer_ptr</definition>
        <argsstring></argsstring>
        <name>m_buffer_ptr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robometry/Buffer.h" line="179" column="21" bodyfile="robometry/Buffer.h" bodystart="179" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classrobometry_1_1Buffer_1a0f9013144510d59b9274980297441465" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>robometry::Buffer::Buffer</definition>
        <argsstring>()=default</argsstring>
        <name>Buffer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robometry/Buffer.h" line="30" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classrobometry_1_1Buffer_1a765bbdb2851ff1c3cbe97158bc094825" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>robometry::Buffer::Buffer</definition>
        <argsstring>(const Buffer &amp;_other)=default</argsstring>
        <name>Buffer</name>
        <param>
          <type>const <ref refid="classrobometry_1_1Buffer" kindref="compound">Buffer</ref> &amp;</type>
          <declname>_other</declname>
        </param>
        <briefdescription>
<para>Construct a new <ref refid="classrobometry_1_1Buffer" kindref="compound">Buffer</ref> object copying from another <ref refid="classrobometry_1_1Buffer" kindref="compound">Buffer</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">_other</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classrobometry_1_1Buffer" kindref="compound">Buffer</ref> to be copied. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robometry/Buffer.h" line="37" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classrobometry_1_1Buffer_1afb7c88b75c33a37182e76d58d4859810" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>robometry::Buffer::Buffer</definition>
        <argsstring>(Buffer &amp;&amp;_other) noexcept=default</argsstring>
        <name>Buffer</name>
        <param>
          <type><ref refid="classrobometry_1_1Buffer" kindref="compound">Buffer</ref> &amp;&amp;</type>
          <declname>_other</declname>
        </param>
        <briefdescription>
<para>Construct a new <ref refid="classrobometry_1_1Buffer" kindref="compound">Buffer</ref> object moving from another <ref refid="classrobometry_1_1Buffer" kindref="compound">Buffer</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">_other</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classrobometry_1_1Buffer" kindref="compound">Buffer</ref> to be moved. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robometry/Buffer.h" line="44" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classrobometry_1_1Buffer_1a42cbea070b8f21f691767e0b44a9a215" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classrobometry_1_1Buffer" kindref="compound">Buffer</ref> &amp;</type>
        <definition>Buffer&amp; robometry::Buffer::operator=</definition>
        <argsstring>(const Buffer &amp;_other)=default</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classrobometry_1_1Buffer" kindref="compound">Buffer</ref> &amp;</type>
          <declname>_other</declname>
        </param>
        <briefdescription>
<para>Copy assignment operator. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">_other</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classrobometry_1_1Buffer" kindref="compound">Buffer</ref> to be copied. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classrobometry_1_1Buffer" kindref="compound">Buffer</ref>&amp; Resulting <ref refid="classrobometry_1_1Buffer" kindref="compound">Buffer</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robometry/Buffer.h" line="52" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classrobometry_1_1Buffer_1a7b7591cd0673ca1709818aa9286459cf" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="classrobometry_1_1Buffer" kindref="compound">Buffer</ref> &amp;</type>
        <definition>Buffer&amp; robometry::Buffer::operator=</definition>
        <argsstring>(Buffer &amp;&amp;_other) noexcept=default</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classrobometry_1_1Buffer" kindref="compound">Buffer</ref> &amp;&amp;</type>
          <declname>_other</declname>
        </param>
        <briefdescription>
<para>Move assignment operator. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">_other</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classrobometry_1_1Buffer" kindref="compound">Buffer</ref> to be moved.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classrobometry_1_1Buffer" kindref="compound">Buffer</ref>&amp; Resulting <ref refid="classrobometry_1_1Buffer" kindref="compound">Buffer</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robometry/Buffer.h" line="61" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classrobometry_1_1Buffer_1ae4b1e9f26bed17f2ff88d976fafdb4d2" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>virtual robometry::Buffer::~Buffer</definition>
        <argsstring>()=default</argsstring>
        <name>~Buffer</name>
        <briefdescription>
<para>Destroy the <ref refid="classrobometry_1_1Buffer" kindref="compound">Buffer</ref> object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robometry/Buffer.h" line="67" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classrobometry_1_1Buffer_1ab1ed7d33e9eae2df25c2566e1323da5b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>robometry::Buffer::Buffer</definition>
        <argsstring>(size_t num_elements)</argsstring>
        <name>Buffer</name>
        <param>
          <type>size_t</type>
          <declname>num_elements</declname>
        </param>
        <briefdescription>
<para>Construct a new <ref refid="classrobometry_1_1Buffer" kindref="compound">Buffer</ref> object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">num_elements</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of elements of the <ref refid="classrobometry_1_1Buffer" kindref="compound">Buffer</ref> to be constructed. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robometry/Buffer.h" line="73" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classrobometry_1_1Buffer_1aa1c2cab562eafccdaa857eaabece21ce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void robometry::Buffer::push_back</definition>
        <argsstring>(const Record &amp;elem)</argsstring>
        <name>push_back</name>
        <param>
          <type>const <ref refid="structrobometry_1_1Record" kindref="compound">Record</ref> &amp;</type>
          <declname>elem</declname>
        </param>
        <briefdescription>
<para>Push back copying the new <ref refid="structrobometry_1_1Record" kindref="compound">Record</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">elem</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structrobometry_1_1Record" kindref="compound">Record</ref> to be copied </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robometry/Buffer.h" line="80" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classrobometry_1_1Buffer_1a3ee8870b614dec6dcb0c3d7a56f1108d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void robometry::Buffer::push_back</definition>
        <argsstring>(Record &amp;&amp;elem)</argsstring>
        <name>push_back</name>
        <param>
          <type><ref refid="structrobometry_1_1Record" kindref="compound">Record</ref> &amp;&amp;</type>
          <declname>elem</declname>
        </param>
        <briefdescription>
<para>Push back moving the new <ref refid="structrobometry_1_1Record" kindref="compound">Record</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">elem</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structrobometry_1_1Record" kindref="compound">Record</ref> to be moved. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robometry/Buffer.h" line="87" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classrobometry_1_1Buffer_1a9045fd031d2fe5f9f9d8a87917d6f338" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t robometry::Buffer::getBufferFreeSpace</definition>
        <argsstring>() const</argsstring>
        <name>getBufferFreeSpace</name>
        <briefdescription>
<para>Get the <ref refid="classrobometry_1_1Buffer" kindref="compound">Buffer</ref> free space. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>size_t The free space expressed in bytes. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robometry/Buffer.h" line="94" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classrobometry_1_1Buffer_1ac1aae073edc0316156694acd0971c9c8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t robometry::Buffer::size</definition>
        <argsstring>() const</argsstring>
        <name>size</name>
        <briefdescription>
<para>Get the size of the <ref refid="classrobometry_1_1Buffer" kindref="compound">Buffer</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>size_t The size of the buffer </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robometry/Buffer.h" line="101" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classrobometry_1_1Buffer_1afc835d7b5ba0a325df8a93d68fdff523" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t robometry::Buffer::capacity</definition>
        <argsstring>() const</argsstring>
        <name>capacity</name>
        <briefdescription>
<para>Get the capacity of <ref refid="classrobometry_1_1Buffer" kindref="compound">Buffer</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>size_t The capacity of the buffer. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robometry/Buffer.h" line="108" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classrobometry_1_1Buffer_1a1b2001f9030b70d04c3d2c75a7edfcb3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool robometry::Buffer::empty</definition>
        <argsstring>() const</argsstring>
        <name>empty</name>
        <briefdescription>
<para>Return true if the <ref refid="classrobometry_1_1Buffer" kindref="compound">Buffer</ref> is empty, false otherwise. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robometry/Buffer.h" line="115" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classrobometry_1_1Buffer_1adb4fdef5078ba482afea6725b3607647" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void robometry::Buffer::resize</definition>
        <argsstring>(size_t new_size)</argsstring>
        <name>resize</name>
        <param>
          <type>size_t</type>
          <declname>new_size</declname>
        </param>
        <briefdescription>
<para>Resize the <ref refid="classrobometry_1_1Buffer" kindref="compound">Buffer</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">new_size</parametername>
</parameternamelist>
<parameterdescription>
<para>The new size to be resized to. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robometry/Buffer.h" line="122" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classrobometry_1_1Buffer_1afbb6b371bef0e57b1e5b4b114fef61b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void robometry::Buffer::set_capacity</definition>
        <argsstring>(size_t new_size)</argsstring>
        <name>set_capacity</name>
        <param>
          <type>size_t</type>
          <declname>new_size</declname>
        </param>
        <briefdescription>
<para>Change the capacity of the <ref refid="classrobometry_1_1Buffer" kindref="compound">Buffer</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">new_size</parametername>
</parameternamelist>
<parameterdescription>
<para>The new size. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robometry/Buffer.h" line="129" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classrobometry_1_1Buffer_1a88e24df79a6b63ad63296290cfb5f9ba" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool robometry::Buffer::full</definition>
        <argsstring>() const</argsstring>
        <name>full</name>
        <briefdescription>
<para>Return true if the <ref refid="classrobometry_1_1Buffer" kindref="compound">Buffer</ref> is full, false otherwise. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robometry/Buffer.h" line="135" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classrobometry_1_1Buffer_1aa5c9f6328541bc93236f455e15dd8db1" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>iterator</type>
        <definition>iterator robometry::Buffer::begin</definition>
        <argsstring>() noexcept</argsstring>
        <name>begin</name>
        <briefdescription>
<para>Return the iterator referred to the begin of the <ref refid="classrobometry_1_1Buffer" kindref="compound">Buffer</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>iterator </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robometry/Buffer.h" line="142" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classrobometry_1_1Buffer_1ab91c3240269e819319357cbce60980bf" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>iterator</type>
        <definition>iterator robometry::Buffer::end</definition>
        <argsstring>() noexcept</argsstring>
        <name>end</name>
        <briefdescription>
<para>Return the iterator referred to the end of the <ref refid="classrobometry_1_1Buffer" kindref="compound">Buffer</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>iterator </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robometry/Buffer.h" line="149" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classrobometry_1_1Buffer_1a6bb6fe82f95faa128d225f77ca11804d" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>const_iterator</type>
        <definition>const_iterator robometry::Buffer::begin</definition>
        <argsstring>() const noexcept</argsstring>
        <name>begin</name>
        <briefdescription>
<para>Return the const iterator referred to the begin of the <ref refid="classrobometry_1_1Buffer" kindref="compound">Buffer</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>const_iterator </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robometry/Buffer.h" line="156" column="20"/>
      </memberdef>
      <memberdef kind="function" id="classrobometry_1_1Buffer_1a294be7083c6d6cabdf064b36ce0e8ebd" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>const_iterator</type>
        <definition>const_iterator robometry::Buffer::end</definition>
        <argsstring>() const noexcept</argsstring>
        <name>end</name>
        <briefdescription>
<para>Return the const iterator referred to the end of the <ref refid="classrobometry_1_1Buffer" kindref="compound">Buffer</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>const_iterator </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robometry/Buffer.h" line="163" column="20"/>
      </memberdef>
      <memberdef kind="function" id="classrobometry_1_1Buffer_1a9dbd288326912570a14e1520be39025b" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void robometry::Buffer::clear</definition>
        <argsstring>() noexcept</argsstring>
        <name>clear</name>
        <briefdescription>
<para>Clear the content of the buffer. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robometry/Buffer.h" line="169" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classrobometry_1_1Buffer_1a0519952b22c42357b41029f1ce1ab650" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; boost::circular_buffer&lt; <ref refid="structrobometry_1_1Record" kindref="compound">Record</ref> &gt; &gt;</type>
        <definition>std::shared_ptr&lt;boost::circular_buffer&lt;Record&gt; &gt; robometry::Buffer::getBufferSharedPtr</definition>
        <argsstring>() const</argsstring>
        <name>getBufferSharedPtr</name>
        <briefdescription>
<para>Get the <ref refid="classrobometry_1_1Buffer" kindref="compound">Buffer</ref> shared_ptr object. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>std::shared_ptr&lt;boost::circular_buffer&lt;Record&gt;&gt; </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="robometry/Buffer.h" line="176" column="21"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A class to represent the buffer of <ref refid="structrobometry_1_1Record" kindref="compound">robometry::Record</ref>. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="robometry/Buffer.h" line="24" column="1" bodyfile="robometry/Buffer.h" bodystart="24" bodyend="182"/>
    <listofallmembers>
      <member refid="classrobometry_1_1Buffer_1aa5c9f6328541bc93236f455e15dd8db1" prot="public" virt="non-virtual"><scope>robometry::Buffer</scope><name>begin</name></member>
      <member refid="classrobometry_1_1Buffer_1a6bb6fe82f95faa128d225f77ca11804d" prot="public" virt="non-virtual"><scope>robometry::Buffer</scope><name>begin</name></member>
      <member refid="classrobometry_1_1Buffer_1a0f9013144510d59b9274980297441465" prot="public" virt="non-virtual"><scope>robometry::Buffer</scope><name>Buffer</name></member>
      <member refid="classrobometry_1_1Buffer_1a765bbdb2851ff1c3cbe97158bc094825" prot="public" virt="non-virtual"><scope>robometry::Buffer</scope><name>Buffer</name></member>
      <member refid="classrobometry_1_1Buffer_1afb7c88b75c33a37182e76d58d4859810" prot="public" virt="non-virtual"><scope>robometry::Buffer</scope><name>Buffer</name></member>
      <member refid="classrobometry_1_1Buffer_1ab1ed7d33e9eae2df25c2566e1323da5b" prot="public" virt="non-virtual"><scope>robometry::Buffer</scope><name>Buffer</name></member>
      <member refid="classrobometry_1_1Buffer_1afc835d7b5ba0a325df8a93d68fdff523" prot="public" virt="non-virtual"><scope>robometry::Buffer</scope><name>capacity</name></member>
      <member refid="classrobometry_1_1Buffer_1a9dbd288326912570a14e1520be39025b" prot="public" virt="non-virtual"><scope>robometry::Buffer</scope><name>clear</name></member>
      <member refid="classrobometry_1_1Buffer_1a23320ce999748b3be77dbe797560f841" prot="public" virt="non-virtual"><scope>robometry::Buffer</scope><name>const_iterator</name></member>
      <member refid="classrobometry_1_1Buffer_1a1b2001f9030b70d04c3d2c75a7edfcb3" prot="public" virt="non-virtual"><scope>robometry::Buffer</scope><name>empty</name></member>
      <member refid="classrobometry_1_1Buffer_1ab91c3240269e819319357cbce60980bf" prot="public" virt="non-virtual"><scope>robometry::Buffer</scope><name>end</name></member>
      <member refid="classrobometry_1_1Buffer_1a294be7083c6d6cabdf064b36ce0e8ebd" prot="public" virt="non-virtual"><scope>robometry::Buffer</scope><name>end</name></member>
      <member refid="classrobometry_1_1Buffer_1a88e24df79a6b63ad63296290cfb5f9ba" prot="public" virt="non-virtual"><scope>robometry::Buffer</scope><name>full</name></member>
      <member refid="classrobometry_1_1Buffer_1a9045fd031d2fe5f9f9d8a87917d6f338" prot="public" virt="non-virtual"><scope>robometry::Buffer</scope><name>getBufferFreeSpace</name></member>
      <member refid="classrobometry_1_1Buffer_1a0519952b22c42357b41029f1ce1ab650" prot="public" virt="non-virtual"><scope>robometry::Buffer</scope><name>getBufferSharedPtr</name></member>
      <member refid="classrobometry_1_1Buffer_1a562e3625a19d4f537b6cf4427dc7d26b" prot="public" virt="non-virtual"><scope>robometry::Buffer</scope><name>iterator</name></member>
      <member refid="classrobometry_1_1Buffer_1a53ce05c91895042c65b1536dff7e54d1" prot="private" virt="non-virtual"><scope>robometry::Buffer</scope><name>m_buffer_ptr</name></member>
      <member refid="classrobometry_1_1Buffer_1a42cbea070b8f21f691767e0b44a9a215" prot="public" virt="non-virtual"><scope>robometry::Buffer</scope><name>operator=</name></member>
      <member refid="classrobometry_1_1Buffer_1a7b7591cd0673ca1709818aa9286459cf" prot="public" virt="non-virtual"><scope>robometry::Buffer</scope><name>operator=</name></member>
      <member refid="classrobometry_1_1Buffer_1aa1c2cab562eafccdaa857eaabece21ce" prot="public" virt="non-virtual"><scope>robometry::Buffer</scope><name>push_back</name></member>
      <member refid="classrobometry_1_1Buffer_1a3ee8870b614dec6dcb0c3d7a56f1108d" prot="public" virt="non-virtual"><scope>robometry::Buffer</scope><name>push_back</name></member>
      <member refid="classrobometry_1_1Buffer_1adb4fdef5078ba482afea6725b3607647" prot="public" virt="non-virtual"><scope>robometry::Buffer</scope><name>resize</name></member>
      <member refid="classrobometry_1_1Buffer_1afbb6b371bef0e57b1e5b4b114fef61b5" prot="public" virt="non-virtual"><scope>robometry::Buffer</scope><name>set_capacity</name></member>
      <member refid="classrobometry_1_1Buffer_1ac1aae073edc0316156694acd0971c9c8" prot="public" virt="non-virtual"><scope>robometry::Buffer</scope><name>size</name></member>
      <member refid="classrobometry_1_1Buffer_1ae4b1e9f26bed17f2ff88d976fafdb4d2" prot="public" virt="virtual"><scope>robometry::Buffer</scope><name>~Buffer</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
